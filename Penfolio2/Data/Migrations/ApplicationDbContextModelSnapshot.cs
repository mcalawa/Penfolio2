// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Penfolio2.Data;

#nullable disable

namespace Penfolio2.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.AccessPermission", b =>
                {
                    b.Property<int>("AccessPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccessPermissionId"));

                    b.Property<int?>("FolderId")
                        .HasColumnType("int");

                    b.Property<bool>("FriendAccess")
                        .HasColumnType("bit");

                    b.Property<bool>("MinorAccess")
                        .HasColumnType("bit");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int");

                    b.Property<bool>("PublicAccess")
                        .HasColumnType("bit");

                    b.Property<bool>("PublisherAccess")
                        .HasColumnType("bit");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("int");

                    b.Property<bool>("ShowsUpInSearch")
                        .HasColumnType("bit");

                    b.Property<int?>("WritingId")
                        .HasColumnType("int");

                    b.HasKey("AccessPermissionId");

                    b.ToTable("AccessPermission", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.AccessRequest", b =>
                {
                    b.Property<int>("AccessRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccessRequestId"));

                    b.Property<int>("AccessPermissionId")
                        .HasColumnType("int");

                    b.Property<int?>("PenProfileProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequesterId")
                        .HasColumnType("int");

                    b.Property<bool>("Resolved")
                        .HasColumnType("bit");

                    b.HasKey("AccessRequestId");

                    b.HasIndex("AccessPermissionId");

                    b.HasIndex("PenProfileProfileId");

                    b.HasIndex("RequesterId");

                    b.ToTable("AccessRequest", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.AltFormatName", b =>
                {
                    b.Property<int>("AltFormatNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AltFormatNameId"));

                    b.Property<string>("AltName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormatId")
                        .HasColumnType("int");

                    b.HasKey("AltFormatNameId");

                    b.HasIndex("FormatId");

                    b.ToTable("AltFormatName", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.AltGenreName", b =>
                {
                    b.Property<int>("AltGenreNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AltGenreNameId"));

                    b.Property<string>("AltName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("AltGenreNameId");

                    b.HasIndex("GenreId");

                    b.ToTable("AltGenreName", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CommenterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FolderId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("SeriesId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("WritingId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("CommenterId");

                    b.HasIndex("FolderId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("SeriesId");

                    b.HasIndex("WritingId");

                    b.ToTable("Comments", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.CommentFlag", b =>
                {
                    b.Property<int>("CommentFlagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentFlagId"));

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FlagDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlagReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FlaggerId")
                        .HasColumnType("int");

                    b.HasKey("CommentFlagId");

                    b.HasIndex("CommentId");

                    b.HasIndex("FlaggerId");

                    b.ToTable("CommentFlag", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.CommentReply", b =>
                {
                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("ReplyId")
                        .HasColumnType("int");

                    b.Property<int?>("CommentId1")
                        .HasColumnType("int");

                    b.HasKey("CommentId", "ReplyId");

                    b.HasIndex("CommentId1")
                        .IsUnique()
                        .HasFilter("[CommentId1] IS NOT NULL");

                    b.HasIndex("ReplyId");

                    b.ToTable("CommentReply", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.Critique", b =>
                {
                    b.Property<int>("CritiqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CritiqueId"));

                    b.Property<int>("CriticId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CritiqueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("EditedDocument")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("WritingId")
                        .HasColumnType("int");

                    b.HasKey("CritiqueId");

                    b.HasIndex("CriticId");

                    b.HasIndex("WritingId");

                    b.ToTable("Critique", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.CritiqueGiver", b =>
                {
                    b.Property<int>("CritiqueGiverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CritiqueGiverId"));

                    b.Property<int>("CriticId")
                        .HasColumnType("int");

                    b.Property<bool>("ForAny")
                        .HasColumnType("bit");

                    b.Property<bool>("ForFoldersFollowing")
                        .HasColumnType("bit");

                    b.Property<bool>("ForFormatFollowing")
                        .HasColumnType("bit");

                    b.Property<bool>("ForFriends")
                        .HasColumnType("bit");

                    b.Property<bool>("ForGenreFollowing")
                        .HasColumnType("bit");

                    b.Property<bool>("ForMatureWriting")
                        .HasColumnType("bit");

                    b.Property<bool>("ForMyWriters")
                        .HasColumnType("bit");

                    b.Property<bool>("ForProfilesFollowing")
                        .HasColumnType("bit");

                    b.Property<bool>("ForSeriesFollowing")
                        .HasColumnType("bit");

                    b.HasKey("CritiqueGiverId");

                    b.HasIndex("CriticId")
                        .IsUnique();

                    b.ToTable("CritiqueGiver", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.CritiqueRequest", b =>
                {
                    b.Property<int>("CritiqueRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CritiqueRequestId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WritingId")
                        .HasColumnType("int");

                    b.Property<int?>("WritingId1")
                        .HasColumnType("int");

                    b.HasKey("CritiqueRequestId");

                    b.HasIndex("WritingId");

                    b.HasIndex("WritingId1")
                        .IsUnique()
                        .HasFilter("[WritingId1] IS NOT NULL");

                    b.ToTable("CritiqueRequest", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.Folder", b =>
                {
                    b.Property<int>("FolderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FolderId"));

                    b.Property<int>("AccessPermissionId")
                        .HasColumnType("int");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FolderDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FolderId");

                    b.HasIndex("AccessPermissionId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Folder", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.FolderFormat", b =>
                {
                    b.Property<int>("FolderId")
                        .HasColumnType("int");

                    b.Property<int>("FormatId")
                        .HasColumnType("int");

                    b.HasKey("FolderId", "FormatId");

                    b.HasIndex("FormatId");

                    b.ToTable("FolderFormat", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.FolderGenre", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("FolderId")
                        .HasColumnType("int");

                    b.HasKey("GenreId", "FolderId");

                    b.HasIndex("FolderId");

                    b.ToTable("FolderGenre", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.FolderOwner", b =>
                {
                    b.Property<int>("FolderId")
                        .HasColumnType("int");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("PenProfileProfileId")
                        .HasColumnType("int");

                    b.HasKey("FolderId", "OwnerId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PenProfileProfileId");

                    b.ToTable("FolderOwner", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.FolderSubfolder", b =>
                {
                    b.Property<int>("FolderId")
                        .HasColumnType("int");

                    b.Property<int>("SubfolderId")
                        .HasColumnType("int");

                    b.HasKey("FolderId", "SubfolderId");

                    b.HasIndex("SubfolderId");

                    b.ToTable("FolderSubfolder", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.FollowerFollowing", b =>
                {
                    b.Property<int>("FollowerFollowingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FollowerFollowingId"));

                    b.Property<int?>("FolderId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("FollowerId")
                        .HasColumnType("int");

                    b.Property<int?>("FormatId")
                        .HasColumnType("int");

                    b.Property<int?>("GenreId")
                        .HasColumnType("int");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("SeriesId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("FollowerFollowingId");

                    b.HasIndex("FolderId");

                    b.HasIndex("FollowerId");

                    b.HasIndex("FormatId");

                    b.HasIndex("GenreId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("SeriesId");

                    b.ToTable("FollowerFollowing", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.FormatCategory", b =>
                {
                    b.Property<int>("FormatCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FormatCategoryId"));

                    b.Property<int>("FormatId")
                        .HasColumnType("int");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("SecondaryParentId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("FormatCategoryId");

                    b.HasIndex("FormatId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SecondaryParentId");

                    b.ToTable("FormatCategory", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.FormatTag", b =>
                {
                    b.Property<int>("FormatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FormatId"));

                    b.Property<string>("Explanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFictionOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNonfictionOnly")
                        .HasColumnType("bit");

                    b.HasKey("FormatId");

                    b.ToTable("FormatTag", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.FriendRequest", b =>
                {
                    b.Property<int>("FriendRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FriendRequestId"));

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequesteeId")
                        .HasColumnType("int");

                    b.Property<int>("RequesterId")
                        .HasColumnType("int");

                    b.Property<bool>("Resolved")
                        .HasColumnType("bit");

                    b.HasKey("FriendRequestId");

                    b.HasIndex("RequesteeId");

                    b.HasIndex("RequesterId");

                    b.ToTable("FriendRequest", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.Friendship", b =>
                {
                    b.Property<int>("FriendshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FriendshipId"));

                    b.Property<DateTime>("AcceptDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("FirstFriendId")
                        .HasColumnType("int");

                    b.Property<int>("SecondFriendId")
                        .HasColumnType("int");

                    b.HasKey("FriendshipId");

                    b.HasIndex("FirstFriendId");

                    b.HasIndex("SecondFriendId");

                    b.ToTable("Friendship", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.GenreCategory", b =>
                {
                    b.Property<int>("GenreCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreCategoryId"));

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("SecondaryParentId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("TertiaryParentId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("GenreCategoryId");

                    b.HasIndex("GenreId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SecondaryParentId");

                    b.HasIndex("TertiaryParentId");

                    b.ToTable("GenreCategory", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.GenreFormat", b =>
                {
                    b.Property<int>("GenreFormatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreFormatId"));

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("ParentFormatId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentGenreId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("GenreFormatId");

                    b.HasIndex("GenreId");

                    b.HasIndex("ParentFormatId");

                    b.HasIndex("ParentGenreId");

                    b.ToTable("GenreFormat", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.GenreTag", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("Explanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFictionOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNonfictionOnly")
                        .HasColumnType("bit");

                    b.HasKey("GenreId");

                    b.ToTable("GenreTag", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.IndividualAccessGrant", b =>
                {
                    b.Property<int>("IndividualAccessGrantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndividualAccessGrantId"));

                    b.Property<int>("AccessPermissionId")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("GrantDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GranteeId")
                        .HasColumnType("int");

                    b.HasKey("IndividualAccessGrantId");

                    b.HasIndex("AccessPermissionId");

                    b.HasIndex("GranteeId");

                    b.ToTable("IndividualAccessGrant", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.IndividualAccessRevoke", b =>
                {
                    b.Property<int>("IndividualAccessRevokeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndividualAccessRevokeId"));

                    b.Property<int>("AccessPermissionId")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RevokeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RevokeeId")
                        .HasColumnType("int");

                    b.HasKey("IndividualAccessRevokeId");

                    b.HasIndex("AccessPermissionId");

                    b.HasIndex("RevokeeId");

                    b.ToTable("IndividualAccessRevoke", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.Like", b =>
                {
                    b.Property<int>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeId"));

                    b.Property<int?>("CommentId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("FolderId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LikeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LikerId")
                        .HasColumnType("int");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("SeriesId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("WritingId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("LikeId");

                    b.HasIndex("CommentId");

                    b.HasIndex("FolderId");

                    b.HasIndex("LikerId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("SeriesId");

                    b.HasIndex("WritingId");

                    b.ToTable("Likes", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.PenProfile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"));

                    b.Property<int>("AccessPermissionId")
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMainProfile")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfileImage")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UrlString")
                        .IsRequired()
                        .HasMaxLength(900)
                        .HasColumnType("nvarchar(900)");

                    b.Property<bool>("UseSecondaryRoleName")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.HasKey("ProfileId");

                    b.HasIndex("AccessPermissionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Profile", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.PenRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<bool>("CanPostWritings")
                        .HasColumnType("bit");

                    b.Property<bool>("CanRepresentWriters")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryRoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("PenRole", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.PenUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("GivenName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Strikes")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("UseLowDataMode")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.Series", b =>
                {
                    b.Property<int>("SeriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeriesId"));

                    b.Property<int>("AccessPermissionId")
                        .HasColumnType("int");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStandAlone")
                        .HasColumnType("bit");

                    b.Property<int?>("NextSeriesId")
                        .HasColumnType("int");

                    b.Property<int?>("PreviousSeriesId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("SeriesDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeriesName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeriesId");

                    b.HasIndex("AccessPermissionId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("NextSeriesId");

                    b.HasIndex("PreviousSeriesId");

                    b.ToTable("Series", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.SeriesFormat", b =>
                {
                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<int>("FormatId")
                        .HasColumnType("int");

                    b.HasKey("SeriesId", "FormatId");

                    b.HasIndex("FormatId");

                    b.ToTable("SeriesFormat", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.SeriesGenre", b =>
                {
                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("SeriesId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("SeriesGenre", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.SeriesOwner", b =>
                {
                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("SeriesId", "OwnerId");

                    b.HasIndex("OwnerId");

                    b.ToTable("SeriesOwner", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.SeriesSeries", b =>
                {
                    b.Property<int>("OverarchingSeriesId")
                        .HasColumnType("int");

                    b.Property<int>("SeriesMemberId")
                        .HasColumnType("int");

                    b.Property<bool>("IsStandAlone")
                        .HasColumnType("bit");

                    b.HasKey("OverarchingSeriesId", "SeriesMemberId");

                    b.HasIndex("SeriesMemberId");

                    b.ToTable("SeriesSeries", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.UserBlock", b =>
                {
                    b.Property<int>("UserBlockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserBlockId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BlockedAsProfileId")
                        .HasColumnType("int");

                    b.Property<string>("BlockedUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BlockingUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("CanSeeOtherProfilesForUser")
                        .HasColumnType("bit");

                    b.Property<bool>("CanStillSeeUser")
                        .HasColumnType("bit");

                    b.HasKey("UserBlockId");

                    b.HasIndex("BlockedUserId");

                    b.HasIndex("BlockingUserId");

                    b.ToTable("UserBlock", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.Writing", b =>
                {
                    b.Property<int>("WritingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WritingId"));

                    b.Property<int>("AccessPermissionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("CommentsOn")
                        .HasColumnType("bit");

                    b.Property<bool>("CritiqueOn")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsStandAlone")
                        .HasColumnType("bit");

                    b.Property<bool>("LikesOn")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("WritingId");

                    b.HasIndex("AccessPermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("Writing", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.WritingFolder", b =>
                {
                    b.Property<int>("WritingId")
                        .HasColumnType("int");

                    b.Property<int>("FolderId")
                        .HasColumnType("int");

                    b.HasKey("WritingId", "FolderId");

                    b.HasIndex("FolderId");

                    b.ToTable("WritingFolder", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.WritingFormat", b =>
                {
                    b.Property<int>("WritingId")
                        .HasColumnType("int");

                    b.Property<int>("FormatId")
                        .HasColumnType("int");

                    b.HasKey("WritingId", "FormatId");

                    b.HasIndex("FormatId");

                    b.ToTable("WritingFormat", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.WritingGenre", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("WritingId")
                        .HasColumnType("int");

                    b.HasKey("GenreId", "WritingId");

                    b.HasIndex("WritingId");

                    b.ToTable("WritingGenre", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.WritingProfile", b =>
                {
                    b.Property<int>("WritingId")
                        .HasColumnType("int");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.HasKey("WritingId", "ProfileId");

                    b.HasIndex("ProfileId");

                    b.ToTable("WritingProfile", "dbo");
                });

            modelBuilder.Entity("Penfolio2.Models.WritingSeries", b =>
                {
                    b.Property<int>("WritingSeriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WritingSeriesId"));

                    b.Property<int?>("NextWritingId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("PreviousWritingId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<int>("WritingId")
                        .HasColumnType("int");

                    b.Property<int?>("WritingId1")
                        .HasColumnType("int");

                    b.HasKey("WritingSeriesId");

                    b.HasIndex("NextWritingId");

                    b.HasIndex("PreviousWritingId");

                    b.HasIndex("SeriesId");

                    b.HasIndex("WritingId");

                    b.HasIndex("WritingId1");

                    b.ToTable("WritingSeries", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Penfolio2.Models.PenUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Penfolio2.Models.PenUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.PenUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Penfolio2.Models.PenUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Penfolio2.Models.AccessRequest", b =>
                {
                    b.HasOne("Penfolio2.Models.AccessPermission", "AccessPermission")
                        .WithMany("AccessRequests")
                        .HasForeignKey("AccessPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.PenProfile", null)
                        .WithMany("PendingAccessRequests")
                        .HasForeignKey("PenProfileProfileId");

                    b.HasOne("Penfolio2.Models.PenProfile", "Requester")
                        .WithMany()
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccessPermission");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("Penfolio2.Models.AltFormatName", b =>
                {
                    b.HasOne("Penfolio2.Models.FormatTag", "FormatTag")
                        .WithMany("AltFormatNames")
                        .HasForeignKey("FormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormatTag");
                });

            modelBuilder.Entity("Penfolio2.Models.AltGenreName", b =>
                {
                    b.HasOne("Penfolio2.Models.GenreTag", "GenreTag")
                        .WithMany("AltGenreNames")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GenreTag");
                });

            modelBuilder.Entity("Penfolio2.Models.Comment", b =>
                {
                    b.HasOne("Penfolio2.Models.PenProfile", "Commenter")
                        .WithMany("CommentsMade")
                        .HasForeignKey("CommenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.Folder", "Folder")
                        .WithMany("Comments")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.PenProfile", "CommentProfile")
                        .WithMany("CommentsReceived")
                        .HasForeignKey("ProfileId");

                    b.HasOne("Penfolio2.Models.Series", "Series")
                        .WithMany("Comments")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.Writing", "Writing")
                        .WithMany("Comments")
                        .HasForeignKey("WritingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CommentProfile");

                    b.Navigation("Commenter");

                    b.Navigation("Folder");

                    b.Navigation("Series");

                    b.Navigation("Writing");
                });

            modelBuilder.Entity("Penfolio2.Models.CommentFlag", b =>
                {
                    b.HasOne("Penfolio2.Models.Comment", "Comment")
                        .WithMany("CommentFlags")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.PenProfile", "Flagger")
                        .WithMany("CommentsFlagged")
                        .HasForeignKey("FlaggerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Flagger");
                });

            modelBuilder.Entity("Penfolio2.Models.CommentReply", b =>
                {
                    b.HasOne("Penfolio2.Models.Comment", "Comment")
                        .WithMany("CommentReplies")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.Comment", null)
                        .WithOne("ReplyTo")
                        .HasForeignKey("Penfolio2.Models.CommentReply", "CommentId1");

                    b.HasOne("Penfolio2.Models.Comment", "Reply")
                        .WithMany()
                        .HasForeignKey("ReplyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Reply");
                });

            modelBuilder.Entity("Penfolio2.Models.Critique", b =>
                {
                    b.HasOne("Penfolio2.Models.PenProfile", "Critic")
                        .WithMany("CritiqueGiven")
                        .HasForeignKey("CriticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.Writing", "Writing")
                        .WithMany("Critiques")
                        .HasForeignKey("WritingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Critic");

                    b.Navigation("Writing");
                });

            modelBuilder.Entity("Penfolio2.Models.CritiqueGiver", b =>
                {
                    b.HasOne("Penfolio2.Models.PenProfile", "Critic")
                        .WithOne("CritiqueNotificationSettings")
                        .HasForeignKey("Penfolio2.Models.CritiqueGiver", "CriticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Critic");
                });

            modelBuilder.Entity("Penfolio2.Models.CritiqueRequest", b =>
                {
                    b.HasOne("Penfolio2.Models.Writing", "Writing")
                        .WithMany()
                        .HasForeignKey("WritingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.Writing", null)
                        .WithOne("CritiqueRequest")
                        .HasForeignKey("Penfolio2.Models.CritiqueRequest", "WritingId1");

                    b.Navigation("Writing");
                });

            modelBuilder.Entity("Penfolio2.Models.Folder", b =>
                {
                    b.HasOne("Penfolio2.Models.AccessPermission", "AccessPermission")
                        .WithMany()
                        .HasForeignKey("AccessPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.PenUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessPermission");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Penfolio2.Models.FolderFormat", b =>
                {
                    b.HasOne("Penfolio2.Models.Folder", "Folder")
                        .WithMany("Formats")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.FormatTag", "FormatTag")
                        .WithMany("FormatFolders")
                        .HasForeignKey("FormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");

                    b.Navigation("FormatTag");
                });

            modelBuilder.Entity("Penfolio2.Models.FolderGenre", b =>
                {
                    b.HasOne("Penfolio2.Models.Folder", "Folder")
                        .WithMany("Genres")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.GenreTag", "GenreTag")
                        .WithMany("GenreFolders")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");

                    b.Navigation("GenreTag");
                });

            modelBuilder.Entity("Penfolio2.Models.FolderOwner", b =>
                {
                    b.HasOne("Penfolio2.Models.Folder", "Folder")
                        .WithMany("Owners")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.PenProfile", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.PenProfile", null)
                        .WithMany("OwnedFolders")
                        .HasForeignKey("PenProfileProfileId");

                    b.Navigation("Folder");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Penfolio2.Models.FolderSubfolder", b =>
                {
                    b.HasOne("Penfolio2.Models.Folder", "Folder")
                        .WithMany("Subfolders")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.Folder", "Subfolder")
                        .WithMany()
                        .HasForeignKey("SubfolderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Folder");

                    b.Navigation("Subfolder");
                });

            modelBuilder.Entity("Penfolio2.Models.FollowerFollowing", b =>
                {
                    b.HasOne("Penfolio2.Models.Folder", "Folder")
                        .WithMany("Followers")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.PenProfile", "Follower")
                        .WithMany("Following")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.FormatTag", "FormatTag")
                        .WithMany("Followers")
                        .HasForeignKey("FormatId");

                    b.HasOne("Penfolio2.Models.GenreTag", "GenreTag")
                        .WithMany("Followers")
                        .HasForeignKey("GenreId");

                    b.HasOne("Penfolio2.Models.PenProfile", "FollowingProfile")
                        .WithMany("Followers")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Penfolio2.Models.Series", "Series")
                        .WithMany("Followers")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Folder");

                    b.Navigation("Follower");

                    b.Navigation("FollowingProfile");

                    b.Navigation("FormatTag");

                    b.Navigation("GenreTag");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("Penfolio2.Models.FormatCategory", b =>
                {
                    b.HasOne("Penfolio2.Models.FormatTag", "FormatTag")
                        .WithMany("ParentFormats")
                        .HasForeignKey("FormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.FormatTag", "ParentFormat")
                        .WithMany("ChildFormats")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.FormatTag", "SecondaryParentFormat")
                        .WithMany()
                        .HasForeignKey("SecondaryParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FormatTag");

                    b.Navigation("ParentFormat");

                    b.Navigation("SecondaryParentFormat");
                });

            modelBuilder.Entity("Penfolio2.Models.FriendRequest", b =>
                {
                    b.HasOne("Penfolio2.Models.PenProfile", "Requestee")
                        .WithMany("FriendRequestsReceived")
                        .HasForeignKey("RequesteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.PenProfile", "Requester")
                        .WithMany("FriendRequestsSent")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requestee");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("Penfolio2.Models.Friendship", b =>
                {
                    b.HasOne("Penfolio2.Models.PenProfile", "FirstFriend")
                        .WithMany("Friends")
                        .HasForeignKey("FirstFriendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.PenProfile", "SecondFriend")
                        .WithMany()
                        .HasForeignKey("SecondFriendId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FirstFriend");

                    b.Navigation("SecondFriend");
                });

            modelBuilder.Entity("Penfolio2.Models.GenreCategory", b =>
                {
                    b.HasOne("Penfolio2.Models.GenreTag", "GenreTag")
                        .WithMany("ParentGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.GenreTag", "ParentGenre")
                        .WithMany("ChildGenres")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.GenreTag", "SecondaryParentGenre")
                        .WithMany()
                        .HasForeignKey("SecondaryParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.GenreTag", "TertiaryParentGenre")
                        .WithMany()
                        .HasForeignKey("TertiaryParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GenreTag");

                    b.Navigation("ParentGenre");

                    b.Navigation("SecondaryParentGenre");

                    b.Navigation("TertiaryParentGenre");
                });

            modelBuilder.Entity("Penfolio2.Models.GenreFormat", b =>
                {
                    b.HasOne("Penfolio2.Models.GenreTag", "GenreTag")
                        .WithMany("GenreFormats")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.FormatTag", "ParentFormatTag")
                        .WithMany("ChildGenres")
                        .HasForeignKey("ParentFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.GenreTag", "ParentGenreTag")
                        .WithMany()
                        .HasForeignKey("ParentGenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GenreTag");

                    b.Navigation("ParentFormatTag");

                    b.Navigation("ParentGenreTag");
                });

            modelBuilder.Entity("Penfolio2.Models.IndividualAccessGrant", b =>
                {
                    b.HasOne("Penfolio2.Models.AccessPermission", "AccessPermission")
                        .WithMany("IndividualAccessGrants")
                        .HasForeignKey("AccessPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.PenProfile", "Grantee")
                        .WithMany()
                        .HasForeignKey("GranteeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccessPermission");

                    b.Navigation("Grantee");
                });

            modelBuilder.Entity("Penfolio2.Models.IndividualAccessRevoke", b =>
                {
                    b.HasOne("Penfolio2.Models.AccessPermission", "AccessPermission")
                        .WithMany("IndividualAccessRevokes")
                        .HasForeignKey("AccessPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.PenProfile", "Revokee")
                        .WithMany()
                        .HasForeignKey("RevokeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccessPermission");

                    b.Navigation("Revokee");
                });

            modelBuilder.Entity("Penfolio2.Models.Like", b =>
                {
                    b.HasOne("Penfolio2.Models.Comment", "LikedComment")
                        .WithMany("Likes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.Folder", "LikedFolder")
                        .WithMany("Likes")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.PenProfile", "Liker")
                        .WithMany("LikesMade")
                        .HasForeignKey("LikerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.PenProfile", "LikedProfile")
                        .WithMany("LikesReceived")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Penfolio2.Models.Series", "LikedSeries")
                        .WithMany("Likes")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.Writing", "LikedWriting")
                        .WithMany("Likes")
                        .HasForeignKey("WritingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LikedComment");

                    b.Navigation("LikedFolder");

                    b.Navigation("LikedProfile");

                    b.Navigation("LikedSeries");

                    b.Navigation("LikedWriting");

                    b.Navigation("Liker");
                });

            modelBuilder.Entity("Penfolio2.Models.PenProfile", b =>
                {
                    b.HasOne("Penfolio2.Models.AccessPermission", "AccessPermission")
                        .WithMany()
                        .HasForeignKey("AccessPermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.PenRole", "PenRole")
                        .WithMany("RoleProfiles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.PenUser", "PenUser")
                        .WithMany("PenProfiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessPermission");

                    b.Navigation("PenRole");

                    b.Navigation("PenUser");
                });

            modelBuilder.Entity("Penfolio2.Models.Series", b =>
                {
                    b.HasOne("Penfolio2.Models.AccessPermission", "AccessPermission")
                        .WithMany()
                        .HasForeignKey("AccessPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.PenUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.Series", "PreviousSeries")
                        .WithMany()
                        .HasForeignKey("NextSeriesId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Penfolio2.Models.Series", "NextSeries")
                        .WithMany()
                        .HasForeignKey("PreviousSeriesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccessPermission");

                    b.Navigation("Creator");

                    b.Navigation("NextSeries");

                    b.Navigation("PreviousSeries");
                });

            modelBuilder.Entity("Penfolio2.Models.SeriesFormat", b =>
                {
                    b.HasOne("Penfolio2.Models.FormatTag", "FormatTag")
                        .WithMany()
                        .HasForeignKey("FormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormatTag");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("Penfolio2.Models.SeriesGenre", b =>
                {
                    b.HasOne("Penfolio2.Models.GenreTag", "GenreTag")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GenreTag");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("Penfolio2.Models.SeriesOwner", b =>
                {
                    b.HasOne("Penfolio2.Models.PenProfile", "Owner")
                        .WithMany("OwnedSeries")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.Series", "Series")
                        .WithMany("Owners")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("Penfolio2.Models.SeriesSeries", b =>
                {
                    b.HasOne("Penfolio2.Models.Series", "OverarchingSeries")
                        .WithMany("Subseries")
                        .HasForeignKey("OverarchingSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.Series", "SeriesMember")
                        .WithMany("ParentSeries")
                        .HasForeignKey("SeriesMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OverarchingSeries");

                    b.Navigation("SeriesMember");
                });

            modelBuilder.Entity("Penfolio2.Models.UserBlock", b =>
                {
                    b.HasOne("Penfolio2.Models.PenUser", "BlockedUser")
                        .WithMany("UsersBlockedBy")
                        .HasForeignKey("BlockedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.PenUser", "BlockingUser")
                        .WithMany("BlockedUsers")
                        .HasForeignKey("BlockingUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BlockedUser");

                    b.Navigation("BlockingUser");
                });

            modelBuilder.Entity("Penfolio2.Models.Writing", b =>
                {
                    b.HasOne("Penfolio2.Models.AccessPermission", "AccessPermission")
                        .WithMany()
                        .HasForeignKey("AccessPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.PenUser", "PenUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessPermission");

                    b.Navigation("PenUser");
                });

            modelBuilder.Entity("Penfolio2.Models.WritingFolder", b =>
                {
                    b.HasOne("Penfolio2.Models.Folder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.Writing", "Writing")
                        .WithMany("WritingFolders")
                        .HasForeignKey("WritingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Folder");

                    b.Navigation("Writing");
                });

            modelBuilder.Entity("Penfolio2.Models.WritingFormat", b =>
                {
                    b.HasOne("Penfolio2.Models.FormatTag", "FormatTag")
                        .WithMany("FormatWritings")
                        .HasForeignKey("FormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.Writing", "Writing")
                        .WithMany("WritingFormats")
                        .HasForeignKey("WritingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormatTag");

                    b.Navigation("Writing");
                });

            modelBuilder.Entity("Penfolio2.Models.WritingGenre", b =>
                {
                    b.HasOne("Penfolio2.Models.GenreTag", "GenreTag")
                        .WithMany("GenreWritings")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.Writing", "Writing")
                        .WithMany("WritingGenres")
                        .HasForeignKey("WritingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GenreTag");

                    b.Navigation("Writing");
                });

            modelBuilder.Entity("Penfolio2.Models.WritingProfile", b =>
                {
                    b.HasOne("Penfolio2.Models.PenProfile", "PenProfile")
                        .WithMany("ProfileWritings")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.Writing", "Writing")
                        .WithMany("WritingProfiles")
                        .HasForeignKey("WritingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PenProfile");

                    b.Navigation("Writing");
                });

            modelBuilder.Entity("Penfolio2.Models.WritingSeries", b =>
                {
                    b.HasOne("Penfolio2.Models.Writing", "NextWriting")
                        .WithMany()
                        .HasForeignKey("NextWritingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.Writing", "PreviousWriting")
                        .WithMany()
                        .HasForeignKey("PreviousWritingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.Series", "Series")
                        .WithMany("SeriesWritings")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.Writing", "Writing")
                        .WithMany()
                        .HasForeignKey("WritingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Penfolio2.Models.Writing", null)
                        .WithMany("WritingSeries")
                        .HasForeignKey("WritingId1");

                    b.Navigation("NextWriting");

                    b.Navigation("PreviousWriting");

                    b.Navigation("Series");

                    b.Navigation("Writing");
                });

            modelBuilder.Entity("Penfolio2.Models.AccessPermission", b =>
                {
                    b.Navigation("AccessRequests");

                    b.Navigation("IndividualAccessGrants");

                    b.Navigation("IndividualAccessRevokes");
                });

            modelBuilder.Entity("Penfolio2.Models.Comment", b =>
                {
                    b.Navigation("CommentFlags");

                    b.Navigation("CommentReplies");

                    b.Navigation("Likes");

                    b.Navigation("ReplyTo")
                        .IsRequired();
                });

            modelBuilder.Entity("Penfolio2.Models.Folder", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Followers");

                    b.Navigation("Formats");

                    b.Navigation("Genres");

                    b.Navigation("Likes");

                    b.Navigation("Owners");

                    b.Navigation("Subfolders");
                });

            modelBuilder.Entity("Penfolio2.Models.FormatTag", b =>
                {
                    b.Navigation("AltFormatNames");

                    b.Navigation("ChildFormats");

                    b.Navigation("ChildGenres");

                    b.Navigation("Followers");

                    b.Navigation("FormatFolders");

                    b.Navigation("FormatWritings");

                    b.Navigation("ParentFormats");
                });

            modelBuilder.Entity("Penfolio2.Models.GenreTag", b =>
                {
                    b.Navigation("AltGenreNames");

                    b.Navigation("ChildGenres");

                    b.Navigation("Followers");

                    b.Navigation("GenreFolders");

                    b.Navigation("GenreFormats");

                    b.Navigation("GenreWritings");

                    b.Navigation("ParentGenres");
                });

            modelBuilder.Entity("Penfolio2.Models.PenProfile", b =>
                {
                    b.Navigation("CommentsFlagged");

                    b.Navigation("CommentsMade");

                    b.Navigation("CommentsReceived");

                    b.Navigation("CritiqueGiven");

                    b.Navigation("CritiqueNotificationSettings")
                        .IsRequired();

                    b.Navigation("Followers");

                    b.Navigation("Following");

                    b.Navigation("FriendRequestsReceived");

                    b.Navigation("FriendRequestsSent");

                    b.Navigation("Friends");

                    b.Navigation("LikesMade");

                    b.Navigation("LikesReceived");

                    b.Navigation("OwnedFolders");

                    b.Navigation("OwnedSeries");

                    b.Navigation("PendingAccessRequests");

                    b.Navigation("ProfileWritings");
                });

            modelBuilder.Entity("Penfolio2.Models.PenRole", b =>
                {
                    b.Navigation("RoleProfiles");
                });

            modelBuilder.Entity("Penfolio2.Models.PenUser", b =>
                {
                    b.Navigation("BlockedUsers");

                    b.Navigation("PenProfiles");

                    b.Navigation("UsersBlockedBy");
                });

            modelBuilder.Entity("Penfolio2.Models.Series", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Followers");

                    b.Navigation("Likes");

                    b.Navigation("Owners");

                    b.Navigation("ParentSeries");

                    b.Navigation("SeriesWritings");

                    b.Navigation("Subseries");
                });

            modelBuilder.Entity("Penfolio2.Models.Writing", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CritiqueRequest")
                        .IsRequired();

                    b.Navigation("Critiques");

                    b.Navigation("Likes");

                    b.Navigation("WritingFolders");

                    b.Navigation("WritingFormats");

                    b.Navigation("WritingGenres");

                    b.Navigation("WritingProfiles");

                    b.Navigation("WritingSeries");
                });
#pragma warning restore 612, 618
        }
    }
}
