@model Penfolio2.Models.WritingViewModel
@{
    ViewBag.Title = "Edit Writing";
}

<h2>Edit Writing</h2>

<div class="editorMenu">
    <div class="slideshowContainer">
        <form method="post" id="editorForm">
            <!--Title, description, and editor-->
            <div class="slide1">
                <div class="inputGroup">
                    <div class="form-group">
                        <label asp-for="Title" class="control-label"></label>
                        <input asp-for="Title" class="form-control" id="title" />
                        <span asp-validation-for="Title" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Description" class="control-label"></label>
                        <textarea asp-for="Description" class="form-control" id="description"></textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <div id="editorContainer">
                            <!-- Create the editor container -->
                            <div id="editor" class="editor ql-editior ql-container">
                                @Html.Raw(Model.EditorContent)
                            </div>
                        </div>
                    </div>
                </div> <!--inputGroup-->
                <!--when you click next, slide1 collapses and slide2 uncollapses-->
                <div class="buttonGroup">
                    <button type="button" class="nextPage" onclick='loadSlide("slide1", "slide2")'>Next</button>
                </div>
            </div> <!--slide1-->
            <!--Author-->
            <div class="slide2 collapse">
                <div class="inputGroup">
                    @await Component.InvokeAsync("Writing", new { id = ViewBag.WritingId, viewName = "SelectAuthors" })
                </div> <!--inputGroup-->
                <!--back uncollapses slide1 and next uncollapses slide3; both collapse slide2-->
                <div class="buttonGroup">
                    <button type="button" class="prevPage" onclick='loadSlide("slide2", "slide1")'>Back</button>
                    <button type="button" class="nextPage" onclick='loadSlide("slide2", "slide3")'>Next</button>
                </div>
            </div> <!--slide2-->
            <!--Format Tags-->
            <div class="slide3 collapse">
                <div class="inputGroup">
                    @await Component.InvokeAsync("Writing", new { id = ViewBag.WritingId, viewName = "SelectFormat" })
                </div> <!--inputGroup-->
                <!--back uncollapses slide2 and next uncollapses slide4; both collapse slide3-->
                <div class="buttonGroup">
                    <button type="button" class="prevPage" onclick='loadSlide("slide3", "slide2")'>Back</button>
                    <button type="button" class="nextPage" onclick='loadSlide("slide3", "slide4")'>Next</button>
                </div>
            </div> <!--slide3-->
            <!--Genre Tags-->
            <div class="slide4 collapse">
                <div class="inputGroup">
                    @await Component.InvokeAsync("Writing", new { id = ViewBag.WritingId, viewName = "SelectGenre" })
                </div> <!--inputGroup-->
                <!--back uncollapses slide3 and next uncollapses slide5; both collapse slide4-->
                <div class="buttonGroup">
                    <button type="button" class="prevPage" onclick='loadSlide("slide4", "slide3")'>Back</button>
                    <button type="button" class="nextPage" onclick='loadSlide("slide4", "slide5")'>Next</button>
                </div>
            </div> <!--slide4-->
            <!--Permissions-->
            <div class="slide5 collapse">
                <div class="inputGroup">
                    @await Component.InvokeAsync("Writing", new { id = ViewBag.WritingId, viewName = "SelectPermissions" })
                </div> <!--inputGroup-->
                <!--back collapses slide5 and uncollapses slide4; next also collapses slide5, in addition to uncollapsing slide6 and populating the confirmation messages with the current form values-->
                <div class="buttonGroup">
                    <button type="button" class="prevPage" onclick='loadSlide("slide5", "slide4")'>Back</button>
                    <button type="button" class="nextPage" onclick='loadSlideAndConfirm("slide5", "slide6", [@Html.Raw(ViewBag.Profiles)], [@Html.Raw(ViewBag.FormatTags)], [@Html.Raw(ViewBag.GenreTags)])'>Next</button>
                </div>
            </div> <!--slide5-->
            <!--Confirmation-->
            <div class="slide6 collapse">
                <div class="inputGroup">
                    <div class="confirmSelections">
                        <h3>Is this okay?</h3>
                        <span class="confirm">Title</span> <span id="confirmTitle"></span><br />
                        <span class="confirm">Description</span> <span id="confirmDescription"></span><br />
                        <span class="confirm">Profiles</span> <div id="confirmProfiles"></div><br />
                        <span class="confirm">Formats</span> <div id="confirmFormats"></div><br />
                        <span class="confirm">Genres</span> <div id="confirmGenres"></div><br />
                        <span class="confirm">Allow public access?</span> <span id="confirmPublicAccess"></span><br />
                        <span class="confirm">Allow friend access?</span> <span id="confirmFriendAccess"></span><br />
                        <span class="confirm">Allow publisher access?</span> <span id="confirmPublisherAccess"></span><br />
                        <span class="confirm">Allow minor access?</span> <span id="confirmMinorAccess"></span><br />
                        <span class="confirm">Shows up in search?</span> <span id="confirmShowsUpInSearch"></span><br />
                        <div id="confirmText" class="ql-editor"></div>
                    </div>
                    <span class="collapse visually-hidden" id="confirmSelectedProfiles"></span>
                    <span class="collapse visually-hidden" id="confirmSelectedFormats"></span>
                    <span class="collapse visually-hidden" id="confirmSelectedGenres"></span>
                    <input type="hidden" id="editorContent" name="EditorContent" />
                    <input type="hidden" id="selectedProfiles" name="SelectedProfiles" />
                    <input type="hidden" id="selectedFormats" name="SelectedFormats" />
                    <input type="hidden" id="selectedGenres" name="SelectedGenres" />
                </div> <!--inputGroup-->

                <div class="buttonGroup">
                    <!--a div for printing a message if the current input isn't valid-->
                    <div id="validationMessage"></div>
                    <!--keeps your current selections and takes you back to the first slide if the user doesn't choose to confirm their current selections-->
                    <button type="button" class="prevPage" onclick='loadSlide("slide6", "slide1")'>No</button>
                    <!--the save button if they are happy with their selections and the inputs are valid-->
                    <input type="submit" id="createWriting" value="Save" />
                </div> <!--buttonGroup-->
            </div> <!--slide5-->
        </form>
    </div> <!--slideshowContainer-->
</div> <!--editorMenu-->

@section editScripts {
    <!--Include the highlight library-->
    <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"></script>
    <!-- Include the Quill library -->
    <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>

    <!--Initialize Quill Editor-->
    <script src="~/js/editorScript.js" type="text/javascript"></script>
    <script src="~/js/slides.js" type="text/javascript"></script>
    <script src="~/js/createScript.js" type="text/javascript"></script>
    <script src="~/js/formatTags.js" type="text/javascript"></script>
    <script src="~/js/genreTags.js" type="text/javascript"></script>
}