@model Penfolio2.Models.PenProfile

@{
    ViewData["Title"] = "Index";
}
@if(ViewBag.OwnProfile == "true")
{
    @await Component.InvokeAsync("Profile", new { urlString = Model.UrlString })
}
else
{
    <div class="right-align">
        @await Component.InvokeAsync("Notification", new { viewName = "CreateFriendRequest", id = Model.AccessPermissionId })
    </div>
}

<h1 class="clear-right">@Model.DisplayName</h1>

<div>
    @if (Model.UseSecondaryRoleName)
    {
        <h4>@Model.PenRole.SecondaryRoleName</h4>
    }
    else
    {
        <h4>@Model.PenRole.RoleName</h4>
    }
    <hr />
    <dl class="row">
        <dd class="col-sm-10">
            <img id="profilePicture" style="width:350px;height:350px;object-fit:cover" src="data:image/*;base64,@(Convert.ToBase64String(Model.ProfileImage))" />
        </dd>
        <dd class="col-sm-10">
            @Model.ProfileDescription
        </dd>
    </dl>
    <hr />
    @if (Model.RoleId == 1)
    {
        <h4>Writing</h4>
        @foreach (var writing in Model.ProfileWritings.Select(i => i.Writing).OrderByDescending(i => i.EditDate == null ? i.EditDate : i.AddDate))
        {
            @await Component.InvokeAsync("Writing", new { id = writing.WritingId })
        }
    }
    else
    {
        <h4>Writers</h4>
    }
    @if(ViewBag.OwnProfile == "true")
    {
        <hr />
        <h4>Friends</h4>
        @foreach(var friend in Model.Friends.Where(i => i.Active).ToList())
        {
            var friendRoleName = friend.SecondFriend.UseSecondaryRoleName && friend.SecondFriend.RoleId == 2 ? "Literary Agent" : friend.SecondFriend.RoleId == 2 ? "Publisher" : "Writer";
            <span><a href="/Profile/@friend.SecondFriend.UrlString">@friend.SecondFriend.DisplayName (@friendRoleName)</a> | <a href="/Notification/RemoveFriend/@friend.FriendshipId">Remove Friend</a></span><br />
        }

        @if(!Model.AccessPermission.PublicAccess && Model.AccessPermission.IndividualAccessGrants.Count > 0)
        {
            <h4>Individual Access Grantees</h4>
            @foreach(var grant in Model.AccessPermission.IndividualAccessGrants.Where(i => i.Active).ToList())
            {
                var grantRoleName = grant.Grantee.UseSecondaryRoleName && grant.Grantee.RoleId == 2 ? "Literary Agent" : grant.Grantee.RoleId == 2 ? "Publisher" : "Writer";
                <span><a href="/Profile/@grant.Grantee.UrlString">@grant.Grantee.DisplayName (@grantRoleName)</a> | <a href="/Notification/RemoveIndividualAccessGrant/@grant.IndividualAccessGrantId">Remove Individual Access Grant</a></span><br />
            }
        }

        @if(Model.AccessPermission.IndividualAccessRevokes.Count > 0)
        {
            <h4>Individual Access Revokees</h4>
            @foreach(var revoke in Model.AccessPermission.IndividualAccessRevokes.Where(i => i.Active).ToList())
            {
                var revokeRoleName = revoke.Revokee.UseSecondaryRoleName && revoke.Revokee.RoleId == 2 ? "Literary Agent" : revoke.Revokee.RoleId == 2 ? "Publisher" : "Writer";
                <span><a href="/Profile/@revoke.Revokee.UrlString">@revoke.Revokee.DisplayName (@revokeRoleName)</a> | <a href="/Notification/RemoveIndividualAccessRevoke/@revoke.IndividualAccessRevokeId">Remove Individual Access Revoke</a></span><br />
            }
        }
    }
    else if(Model.Friends.Where(i => i.Active).Select(i => i.SecondFriend).Any(i => i.UserId == ViewBag.UserId))
    {
        <hr />
        <h4>Friends</h4>
        @foreach (var friend in Model.Friends.Where(i => i.Active && i.SecondFriend.UserId == ViewBag.UserId).ToList())
        {
            var friendRoleName = friend.SecondFriend.UseSecondaryRoleName && friend.SecondFriend.RoleId == 2 ? "Literary Agent" : friend.SecondFriend.RoleId == 2 ? "Publisher" : "Writer";
            <span><a href="/Profile/@friend.SecondFriend.UrlString">@friend.SecondFriend.DisplayName (@friendRoleName)</a> | <a href="/Notification/RemoveFriend/@friend.FriendshipId">Remove Friend</a></span>

            <br />
        }
    }
</div>